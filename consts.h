#ifndef CONSTS_H
#define CONSTS_H

#include <Arduino.h>

// Color fade tables for particles and effects
// Each row represents a different base color, columns are fade levels (0=brightest, 4=dimmest)
const uint16_t color_fade_table[6][5] PROGMEM = {
  // Red fades
  {0xF800, 0xE000, 0xC000, 0x8000, 0x4000},
  // Green fades  
  {0x07E0, 0x07C0, 0x0780, 0x0540, 0x0300},
  // Blue fades
  {0x001F, 0x001E, 0x001C, 0x0014, 0x000C},
  // Yellow fades
  {0xFFE0, 0xEFC0, 0xDF80, 0xAF40, 0x7F00},
  // Cyan fades
  {0x07FF, 0x07FE, 0x07FC, 0x0554, 0x030C},
  // Magenta fades
  {0xF81F, 0xE01E, 0xC01C, 0x8014, 0x400C}
};

// Fast sine table (90 degrees only, scaled by 256 for ESP8266 efficiency)
const int16_t fast_sin[91] PROGMEM = {
  0, 4, 9, 13, 18, 22, 27, 31, 36, 40, 44, 49, 53, 58, 62, 66,
  71, 75, 79, 83, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132,
  136, 139, 143, 147, 150, 154, 158, 161, 165, 168, 171, 175, 178, 181, 184, 187,
  190, 193, 196, 199, 202, 204, 207, 210, 212, 215, 217, 219, 222, 224, 226, 228,
  230, 232, 234, 236, 237, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251,
  252, 253, 254, 254, 255, 255, 255, 256, 256, 256, 256
};

// Ball velocity reflection lookup for wall bounces (16 common velocity values)
const int8_t velocity_reflect[33] PROGMEM = {
  -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
};

// Paddle collision spin effect lookup (21 positions across paddle width)
const int8_t paddle_spin[21] PROGMEM = {
  -4, -4, -3, -3, -2, -2, -1, -1, -1, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4
};

// Fast collision detection - precomputed overlap areas for 8x8 grid
const uint8_t overlap_threshold[9] PROGMEM = {0, 1, 2, 3, 4, 5, 6, 7, 8};

// Particle spawn velocities for brick destruction (8 directions, optimized for ESP8266)
const int8_t particle_vx[8] PROGMEM = {-2, -1, 0, 1, 2, 1, 0, -1};
const int8_t particle_vy[8] PROGMEM = {-2, -2, -2, -2, -1, 0, 1, 0};

// AI paddle prediction lookup - precomputed time steps
const uint8_t ai_prediction_steps[16] PROGMEM = {
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 24
};

// Trail fade colors (5 levels for smooth fading)
const uint16_t trail_colors[5] PROGMEM = {
  0xFD20, 0xE420, 0xCB20, 0xB220, 0x9920  // Orange fade
};

// Fast division lookup for common divisors (saves CPU cycles on ESP8266)
const uint8_t div_by_2[256] PROGMEM = {
  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
  8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
  16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23,
  24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31,
  32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39,
  40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
  48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55,
  56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63,
  64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71,
  72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79,
  80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87,
  88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95,
  96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103,
  104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111,
  112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119,
  120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127
};

// Constrain lookup for common ranges (0-127 for screen coordinates)
const uint8_t constrain_0_127[256] PROGMEM = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
  96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
};

// Ball physics - bounce angle lookup for different paddle hit positions
const int8_t bounce_angles[21] PROGMEM = {
  -6, -5, -4, -4, -3, -2, -2, -1, -1, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6
};

// Brick health values for different types
const uint8_t brick_health[4] PROGMEM = {0, 1, 1, 1}; // 0=destroyed, 1=normal, can be extended

// Power-up durations (in frames at 60 FPS)
const uint8_t powerup_duration[4] PROGMEM = {0, 0, 600, 300}; // Type 2=10sec, Type 3=5sec

// Distance calculation lookup (Manhattan distance approximation)
const uint8_t manhattan_distance[16][16] PROGMEM = {
  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
  {1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14},
  {2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13},
  {3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
  {4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
  {5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
  {6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
  {7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8},
  {8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7},
  {9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6},
  {10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5},
  {11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4},
  {12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3},
  {13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2},
  {14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1},
  {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
};

// Frame skip patterns for different update frequencies
const uint8_t frame_skip_2[60] PROGMEM = {
  1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
};

const uint8_t frame_skip_3[60] PROGMEM = {
  1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
  1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0
};

// Sine table for particle movement (360 degrees, scaled by 65536)
const int32_t sin_table[360] PROGMEM = {
  0, 1144, 2287, 3430, 4571, 5712, 6850, 7986, 9120, 10252, 11380, 12505, 13625, 14742, 15854, 16962,
  18064, 19161, 20252, 21336, 22414, 23486, 24550, 25607, 26656, 27696, 28729, 29752, 30767, 31772, 32768, 33754,
  34729, 35693, 36647, 37589, 38521, 39440, 40347, 41243, 42125, 42995, 43852, 44695, 45525, 46340, 47142, 47929,
  48702, 49460, 50203, 50931, 51643, 52339, 53020, 53684, 54331, 54963, 55577, 56175, 56755, 57319, 57864, 58393,
  58903, 59395, 59870, 60326, 60763, 61183, 61583, 61965, 62328, 62672, 62997, 63302, 63589, 63856, 64103, 64331,
  64540, 64729, 64898, 65047, 65176, 65286, 65376, 65446, 65496, 65526, 65536, 65526, 65496, 65446, 65376, 65286,
  65176, 65047, 64898, 64729, 64540, 64331, 64103, 63856, 63589, 63302, 62997, 62672, 62328, 61965, 61583, 61183,
  60763, 60326, 59870, 59395, 58903, 58393, 57864, 57319, 56755, 56175, 55577, 54963, 54331, 53684, 53020, 52339,
  51643, 50931, 50203, 49460, 48702, 47929, 47142, 46340, 45525, 44695, 43852, 42995, 42125, 41243, 40347, 39440,
  38521, 37589, 36647, 35693, 34729, 33754, 32768, 31772, 30767, 29752, 28729, 27696, 26656, 25607, 24550, 23486,
  22414, 21336, 20252, 19161, 18064, 16962, 15854, 14742, 13625, 12505, 11380, 10252, 9120, 7986, 6850, 5712,
  4571, 3430, 2287, 1144, 0, -1144, -2287, -3430, -4571, -5712, -6850, -7986, -9120, -10252, -11380, -12505,
  -13625, -14742, -15854, -16962, -18064, -19161, -20252, -21336, -22414, -23486, -24550, -25607, -26656, -27696, -28729, -29752,
  -30767, -31772, -32768, -33754, -34729, -35693, -36647, -37589, -38521, -39440, -40347, -41243, -42125, -42995, -43852, -44695,
  -45525, -46340, -47142, -47929, -48702, -49460, -50203, -50931, -51643, -52339, -53020, -53684, -54331, -54963, -55577, -56175,
  -56755, -57319, -57864, -58393, -58903, -59395, -59870, -60326, -60763, -61183, -61583, -61965, -62328, -62672, -62997, -63302,
  -63589, -63856, -64103, -64331, -64540, -64729, -64898, -65047, -65176, -65286, -65376, -65446, -65496, -65526, -65536, -65526,
  -65496, -65446, -65376, -65286, -65176, -65047, -64898, -64729, -64540, -64331, -64103, -63856, -63589, -63302, -62997, -62672,
  -62328, -61965, -61583, -61183, -60763, -60326, -59870, -59395, -58903, -58393, -57864, -57319, -56755, -56175, -55577, -54963,
  -54331, -53684, -53020, -52339, -51643, -50931, -50203, -49460, -48702, -47929, -47142, -46340, -45525, -44695, -43852, -42995,
  -42125, -41243, -40347, -39440, -38521, -37589, -36647, -35693, -34729, -33754, -32768, -31772, -30767, -29752, -28729, -27696,
  -26656, -25607, -24550, -23486, -22414, -21336, -20252, -19161, -18064, -16962, -15854, -14742, -13625, -12505, -11380, -10252,
  -9120, -7986, -6850, -5712, -4571, -3430, -2287, -1144
};

// Cosine table for particle movement (360 degrees, scaled by 65536)
const int32_t cos_table[360] PROGMEM = {
  65536, 65526, 65496, 65446, 65376, 65286, 65176, 65047, 64898, 64729, 64540, 64331, 64103, 63856, 63589, 63302,
  62997, 62672, 62328, 61965, 61583, 61183, 60763, 60326, 59870, 59395, 58903, 58393, 57864, 57319, 56755, 56175,
  55577, 54963, 54331, 53684, 53020, 52339, 51643, 50931, 50203, 49460, 48702, 47929, 47142, 46340, 45525, 44695,
  43852, 42995, 42125, 41243, 40347, 39440, 38521, 37589, 36647, 35693, 34729, 33754, 32768, 31772, 30767, 29752,
  28729, 27696, 26656, 25607, 24550, 23486, 22414, 21336, 20252, 19161, 18064, 16962, 15854, 14742, 13625, 12505,
  11380, 10252, 9120, 7986, 6850, 5712, 4571, 3430, 2287, 1144, 0, -1144, -2287, -3430, -4571, -5712,
  -6850, -7986, -9120, -10252, -11380, -12505, -13625, -14742, -15854, -16962, -18064, -19161, -20252, -21336, -22414, -23486,
  -24550, -25607, -26656, -27696, -28729, -29752, -30767, -31772, -32768, -33754, -34729, -35693, -36647, -37589, -38521, -39440,
  -40347, -41243, -42125, -42995, -43852, -44695, -45525, -46340, -47142, -47929, -48702, -49460, -50203, -50931, -51643, -52339,
  -53020, -53684, -54331, -54963, -55577, -56175, -56755, -57319, -57864, -58393, -58903, -59395, -59870, -60326, -60763, -61183,
  -61583, -61965, -62328, -62672, -62997, -63302, -63589, -63856, -64103, -64331, -64540, -64729, -64898, -65047, -65176, -65286,
  -65376, -65446, -65496, -65526, -65536, -65526, -65496, -65446, -65376, -65286, -65176, -65047, -64898, -64729, -64540, -64331,
  -64103, -63856, -63589, -63302, -62997, -62672, -62328, -61965, -61583, -61183, -60763, -60326, -59870, -59395, -58903, -58393,
  -57864, -57319, -56755, -56175, -55577, -54963, -54331, -53684, -53020, -52339, -51643, -50931, -50203, -49460, -48702, -47929,
  -47142, -46340, -45525, -44695, -43852, -42995, -42125, -41243, -40347, -39440, -38521, -37589, -36647, -35693, -34729, -33754,
  -32768, -31772, -30767, -29752, -28729, -27696, -26656, -25607, -24550, -23486, -22414, -21336, -20252, -19161, -18064, -16962,
  -15854, -14742, -13625, -12505, -11380, -10252, -9120, -7986, -6850, -5712, -4571, -3430, -2287, -1144, 0, 1144,
  2287, 3430, 4571, 5712, 6850, 7986, 9120, 10252, 11380, 12505, 13625, 14742, 15854, 16962, 18064, 19161,
  20252, 21336, 22414, 23486, 24550, 25607, 26656, 27696, 28729, 29752, 30767, 31772, 32768, 33754, 34729, 35693,
  36647, 37589, 38521, 39440, 40347, 41243, 42125, 42995, 43852, 44695, 45525, 46340, 47142, 47929, 48702, 49460,
  50203, 50931, 51643, 52339, 53020, 53684, 54331, 54963, 55577, 56175, 56755, 57319, 57864, 58393, 58903, 59395,
  59870, 60326, 60763, 61183, 61583, 61965, 62328, 62672, 62997, 63302, 63589, 63856, 64103, 64331, 64540, 64729,
  64898, 65047, 65176, 65286, 65376, 65446, 65496, 65526
};

// Paddle hit position table (scaled by 1024 for precision)
// Index 0-20 represents hit position from left to right of paddle
const uint16_t paddle_hit_table[21] PROGMEM = {
  0,    // Far left edge
  51,   // Left side
  102,  
  154,  
  205,  
  256,  
  307,  
  358,  
  410,  
  461,  
  512,  // Center
  563,  
  614,  
  666,  
  717,  
  768,  
  819,  
  870,  
  922,  
  973,  
  1024  // Far right edge
};

// Particle velocity table for brick destruction effects
// [index][0] = x velocity, [index][1] = y velocity (scaled by 1024)
const int16_t particle_velocity_table[8][2] PROGMEM = {
  {-2048, -1536},  // Up-left
  {-1024, -2048},  // Up-left diagonal
  {0, -2048},      // Straight up
  {1024, -2048},   // Up-right diagonal
  {2048, -1536},   // Up-right
  {1536, -1024},   // Right
  {-1536, -1024},  // Left
  {0, -1024}       // Up (weak)
};

// Fast square root approximation table (for distance calculations)
const uint8_t sqrt_table[256] PROGMEM = {
  0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,
  11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16
};

// Brick type distribution patterns for different levels
const uint8_t brick_patterns[5][48] PROGMEM = {
  // Level 1 pattern - mostly blue with some green
  {1,1,1,1,1,1,1,1, 1,2,1,1,1,1,2,1, 1,1,1,2,2,1,1,1, 1,1,1,1,1,1,1,1, 2,1,1,1,1,1,1,2, 1,1,1,1,1,1,1,1},
  
  // Level 2 pattern - mixed colors
  {1,2,1,2,1,2,1,2, 2,1,2,1,2,1,2,1, 1,1,3,3,3,3,1,1, 1,3,1,1,1,1,3,1, 2,1,1,3,3,1,1,2, 1,2,1,2,1,2,1,2},
  
  // Level 3 pattern - more yellow power-ups
  {2,1,3,1,3,1,3,2, 1,3,1,1,1,1,3,1, 3,1,1,2,2,1,1,3, 1,1,2,1,1,2,1,1, 1,3,1,1,1,1,3,1, 2,1,3,1,3,1,3,2},
  
  // Level 4 pattern - challenging layout
  {3,2,1,1,1,1,2,3, 2,1,2,3,3,2,1,2, 1,2,3,1,1,3,2,1, 1,3,1,2,2,1,3,1, 2,1,2,3,3,2,1,2, 3,2,1,1,1,1,2,3},
  
  // Level 5 pattern - maximum difficulty
  {3,3,2,1,1,2,3,3, 3,2,1,3,3,1,2,3, 2,1,3,2,2,3,1,2, 1,3,2,1,1,2,3,1, 3,2,1,3,3,1,2,3, 3,3,2,1,1,2,3,3}
};

#endif // CONSTS_H